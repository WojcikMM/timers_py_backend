openapi: 3.0.0
info:
  title: Timers API
  version: '1.0'
paths:
  /health:
    get:
      summary: Health Check
      operationId: modules.controllers.health_controller.health_check
      description: Check if the service is alive.
      tags:
        - Health Checks
      responses:
        '200':
          description: Application is alive.
  /self/change-password:
    patch:
      tags:
        - Self Servicre
      security:
        - BearerToken: []
      summary: Changes the user password
      operationId: modules.controllers.auth_controller.update_user_properties
      requestBody:
        required: true
        content:
          application/json:
            schema:
             type: object
             properties:
              password:
                type: string
                format: password
                description: User new password
              email:
                type: string
                format: email
                description: User new email adress
      responses:
        '204':
          description: Users data successfully updated.

        '400':
          description: Updated parameter is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'

        '401':
          description: Invalid Authorization Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'

  /users/update_role:
    patch:
      tags:
        - User Administration
      security:
        - BearerToken: []
      summary: Promote or Degrade user role
      operationId: modules.controllers.auth_controller.update_user_role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_login:
                  type: string
                  format: login
                  example: 'test12'
                  description: Login of the user you want to change the role
                new_role:
                  type: string
                  format: role
                  description: New user role
                  enum:
                    - User
                    - Admin
              required:
                - user_login
                - new_role
      responses:
        '204':
          description: Users data successfully updated.

        '400':
          description: At least one parameter is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '404':
          description: User with this login not exists
        '401':
          description: Invalid Authorization Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '403':
          description: User don't have required roles

  /login:
    post:
      tags:
        - Authorization
        - Self Servicre
      summary: Login to application
      operationId: modules.controllers.auth_controller.login_user
      requestBody:
        description: Login parameters to get JWT Token
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginObject'
      responses:
        '200':
          description: Log In Successfully - Returns Bearer Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTResponse'
        '401':
          description: Authorization failed - wrong login or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'

  /register:
    put:
      tags:
        - Authorization
        - Self Servicre
      summary: Register new user to application
      operationId: modules.controllers.auth_controller.register_user
      requestBody:
        description: Registration user data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: User login
                  format: login
                password:
                  type: string
                  format: password
                  description: User password [in Base64]
                email:
                  type: string
                  format: email
                  description: User email adress
              required:
                - login
                - password
                - email
      responses:
        '200':
          description: Log In Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTResponse'

  /actions:
    get:
      tags:
        - Actions
      summary: Get All Actions
      operationId: modules.controllers.actions_controller.get_all_actions
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/ActionObject'
    post:
      tags:
        - Actions
      security:
        - BearerToken: []
      summary: Create new Action
      operationId: modules.controllers.actions_controller.create_action
      requestBody:
          description: Data to create new Action
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  group_id:
                    type: string
                    format: uuid
                    example: '5c55f6dd9bde60358cc057c2'
                    description: Identity of related Group
                  name:
                    type: string
                    description: Action name
                    example: 'Some Action Name'
                  active:
                    type: boolean
                    default: True
                    description: Defines whether the Action is active or not
                required:
                  - group_id
                  - name
      responses:
        '201':
          description: Action was created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: '5c55f6dd9bde60358cc057c2'
                    description: Identity of just created Action document
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '401':
          description: Invalid Authorization Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '403':
          description: User don't have required roles

  /actions/by-group/{group_id}:
    get:
      summary: Get Actions associated with the Group with the specified identifier
      operationId: modules.controllers.actions_controller.get_actions_for_group
      tags:
        - Actions
      parameters:
        - name: group_id
          in: path
          schema:
            type: string
          required: true
          description: The group Identity associated with the Actions
          example: '5c55f6dd9bde60358cc057c2'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionObject'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '404':
          description: Actions for Group with this identity doesn't exists.

  /actions/{action_id}:
    get:
      summary: Get Action with specyfied Identity
      operationId: modules.controllers.actions_controller.get_action_by_id
      tags:
        - Actions
      parameters:
        - name: action_id
          in: path
          schema:
            type: string
          required: true
          description: Identity of searched Action
          example: '5c55f6dd9bde60358cc057c2'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionObject'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '404':
          description: Action with this identity doesn't exists.
    patch:
      summary: Update Action with specyfied Identity
      operationId: modules.controllers.actions_controller.update_action
      security:
        - BearerToken: []
      tags:
        - Actions
      parameters:
        - name: action_id
          in: path
          schema:
            type: string
          description: The identifier defining the action to be updated
          example: '5c55f6dd9bde60358cc057c2'
          required: true
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  group_id:
                    type: string
                    format: uuid
                    example: '5c55f6dd9bde60358cc057c2'
                    description: Identity of related Group
                  name:
                    type: string
                    description: Action name
                    example: 'Some Action Name'
                  active:
                    type: boolean
                    default: True
                    description: Defines whether the Action is active or not
      responses:
        '204':
          description: Action data updated succesfully
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '401':
          description: Invalid Authorization Token
        '403':
          description: User don't have required roles
        '404':
          description: Action with this identity doesn't exists.
    delete:
      summary: Remove Action with specyfied Identity
      operationId: modules.controllers.actions_controller.remove_action_by_id
      security:
        - BearerToken: []
      tags:
        - Actions
      parameters:
        - name: action_id
          in: path
          schema:
            type: string
          description: The identifier defining the Action to be deleted
          example: '5c55f6dd9bde60358cc057c2'
          required: true
      responses:
        '204':
          description: Action successfully deleted
        '401':
          description: Invalid Authorization Token
        '403':
          description: User don't have required roles
        '404':
          description: Action with specyfied identity was not exists

  /groups:
    get:
      summary: Get all Groups
      operationId: modules.controllers.groups_controller.get_all_groups
      tags:
        - Groups
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupObject'
    post:
      summary: Create new Group
      operationId: modules.controllers.groups_controller.create_group
      security:
        - BearerToken: []
      tags:
        - Groups
      requestBody:
          description: Data to create new Group
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: 'Defines the Group name'
                    example: 'Some Group name'
                  active:
                    type: boolean
                    default: true
                    example: true
                required:
                  - name

      responses:
        '201':
          description: Group was created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: '5c55f6dd9bde60358cc057c2'
                    description: Identity of just created Group document
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '401':
          description: Invalid Authorization Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '403':
          description: User don't have required roles

  /groups/{group_id}:
    get:
      summary: Get Group with specyfied Identity
      operationId: modules.controllers.groups_controller.get_group_by_id
      tags:
        - Groups
      parameters:
        - name: group_id
          in: path
          schema:
            type: string
          required: true
          description: Identity of searched Group
          example: '5c55f6dd9bde60358cc057c2'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupObject'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '404':
          description: Group with this identity doesn't exists.
    patch:
      summary: Update Group with specyfied Identity
      operationId: modules.controllers.groups_controller.update_group
      security:
        - BearerToken: []
      tags:
        - Groups
      parameters:
        - name: group_id
          in: path
          schema:
            type: string
          description: The identifier defining the Group to be updated
          example: '5c55f6dd9bde60358cc057c2'
          required: true
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: Group name
                    example: 'Some Group Name'
                  active:
                    type: boolean
                    default: True
                    description: Defines whether the Group is active or not
      responses:
        '204':
          description: Group data updated succesfully
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '401':
          description: Invalid Authorization Token
        '403':
          description: User don't have required roles
        '404':
          description: Group with this identity doesn't exists.
    delete:
      summary: Remove Group with specyfied Identity
      operationId: modules.controllers.actions_controller.remove_group_by_id
      security:
        - BearerToken: []
      tags:
        - Groups
      parameters:
        - name: group_id
          in: path
          schema:
            type: string
          description: The identifier defining the Group to be deleted
          example: '5c55f6dd9bde60358cc057c2'
          required: true
      responses:
        '204':
          description: Group successfully deleted
        '401':
          description: Invalid Authorization Token
        '403':
          description: User don't have required roles
        '404':
          description: Group with specyfied identity was not exists

  /records:
    get:
      summary: Get all Records
      operationId: modules.controllers.records_controller.get_all_records
      tags:
        - Records
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecordObject'
    post:
      summary: Create new Record
      operationId: modules.controllers.records_controller.create_record
      security:
        - BearerToken: []
      tags:
        - Records
      requestBody:
        description: Data to create new Group
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                    type: string
                    format: uuid
                    example: '5c55f6dd9bde60358cc057c2'
                    description: Identity of related Action
                seconds:
                  type: integer
                  description: 'It presents the time of the performed activity in seconds'
                  example: 68
                comment:
                    type: string
                    description: 'With special document types that grows time to do this activity'

              required:
                - group_id
                - seconds
      responses:
          '201':
            description: Group was created successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: '5c55f6dd9bde60358cc057c2'
                      description: Identity of just created Group document
          '400':
            description: Validation error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorObject'
          '401':
            description: Invalid Authorization Token
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorObject'
          '403':
            description: User don't have required roles

  /records/in-group/{group_id}:
    get:
      summary: Get Record with specyfied Identity
      operationId: modules.controllers.groups_controller.get_records_by_group_id
      tags:
        - Records
      parameters:
        - name: group_id
          in: path
          schema:
            type: string
          required: true
          description: Identity of Group for searched Records
          example: '5c55f6dd9bde60358cc057c2'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupObject'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '404':
          description: Record with this identity doesn't exists.

  /records/in-action/{action_id}:
     get:
      summary: Get Record with specyfied Identity
      operationId: modules.controllers.groups_controller.get_records_by_action_id
      tags:
        - Records
      parameters:
        - name: action_id
          in: path
          schema:
            type: string
          required: true
          description: Identity of Action for searched Records
          example: '5c55f6dd9bde60358cc057c2'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupObject'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '404':
          description: Record with this identity doesn't exists.

  /records/{record_id}:
    get:
      summary: Get Record with specyfied Identity
      operationId: modules.controllers.groups_controller.get_record_by_id
      tags:
        - Records
      parameters:
        - name: record_id
          in: path
          schema:
            type: string
          required: true
          description: Identity of searched Record
          example: '5c55f6dd9bde60358cc057c2'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupObject'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '404':
          description: Record with this identity doesn't exists.
    delete:
      summary: Remove Record with specyfied Identity
      operationId: modules.controllers.actions_controller.remove_record_by_id
      security:
        - BearerToken: []
      tags:
        - Records
      parameters:
        - name: record_id
          in: path
          schema:
            type: string
          description: The identifier defining the Record to be deleted
          example: '5c55f6dd9bde60358cc057c2'
          required: true
      responses:
        '204':
          description: Record successfully deleted
        '401':
          description: Invalid Authorization Token
        '403':
          description: User don't have required roles
        '404':
          description: Record with specyfied identity was not exists


components:
  securitySchemes:
    BearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: modules.security.jwt.decode_token
  schemas:
    ErrorObject:
      properties:
        message:
          type: string
    ActionObject:
      properties:
        id:
          type: string
          format: uuid
          example: '5c55f6dd9bde60358cc057c2'
          description: Action identity
        group_id:
          type: string
          format: uuid
          example: '5c55f6dd9bde60358cc057c2'
          description: Identity of related group
        name:
          type: string
          description: Action name
          example: 'Some Action Name'
        active:
          type: boolean
          description: Defines whether the action is active or not
          default: True
        created_at:
          type: string
          format: date-time
          description: Define when action was created
          example: '2019-02-01 12:53:00'
    GroupObject:
      properties:
        id:
          type: string
          format: uuid
          example: '5c55f6dd9bde60358cc057c2'
          description: Group identity
        name:
          type: string
          description: Group name
          example: 'Some Action Name'
        active:
          type: boolean
          description: Defines whether the Group is active or not
          default: True
        created_at:
          type: string
          format: date-time
          description: Define when Group was created
          example: '2019-02-01 12:53:00'
    JWTResponse:
      properties:
        token:
          type: string
          description: Bearer authorization token
    LoginObject:
      properties:
        login:
          type: string
          description: User login
          format: login
        password:
          type: string
          format: password
          description: User password [in base64]
      required:
        - login
        - password
    RecordObject:
      properties:
        record_id:
          type: string
        action_id:
          type: string
        secondsCount:
          type: integer
        comment:
          type: string
        userId:
          type: string
        userLogin:
          type: string
          format: login
        createdAt:
          type: string
          format: datetime